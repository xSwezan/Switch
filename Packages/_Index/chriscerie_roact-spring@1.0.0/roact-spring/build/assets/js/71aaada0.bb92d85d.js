"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[646],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},862:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},s="useSpring",p={unversionedId:"Hooks/useSpring",id:"Hooks/useSpring",isDocsHomePage:!1,title:"useSpring",description:"Overview",source:"@site/docs/Hooks/useSpring.md",sourceDirName:"Hooks",slug:"/Hooks/useSpring",permalink:"/roact-spring/docs/Hooks/useSpring",editUrl:"https://github.com/chriscerie/roact-spring/edit/master/docs/Hooks/useSpring.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Imperatives",permalink:"/roact-spring/docs/Common/imperatives"},next:{title:"useSprings",permalink:"/roact-spring/docs/Hooks/useSprings"}},c=[{value:"Overview",id:"overview",children:[{value:"Either: declaratively overwrite values to change the animation",id:"either-declaratively-overwrite-values-to-change-the-animation",children:[],level:3},{value:"Or: pass a function that returns values, and imperatively update using the api",id:"or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api",children:[],level:3},{value:"Finally: apply styles to components",id:"finally-apply-styles-to-components",children:[],level:3}],level:2},{value:"Properties",id:"properties",children:[],level:2},{value:"Additional notes",id:"additional-notes",children:[{value:"To-prop shortcut",id:"to-prop-shortcut",children:[],level:3}],level:2},{value:"Demos",id:"demos",children:[{value:"Draggable element",id:"draggable-element",children:[],level:3}],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usespring"},"useSpring"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Defines values into animated values."),(0,o.kt)("h3",{id:"either-declaratively-overwrite-values-to-change-the-animation"},"Either: declaratively overwrite values to change the animation"),(0,o.kt)("p",null,"If you re-render the component, the animation will update."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local styles = RoactSpring.useSpring(hooks, {\n    transparency = if toggle then 1 else 0,\n})\n")),(0,o.kt)("p",null,"If you want the animation to run on mount, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," to set the initial value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    to = { transparency = if toggle then 1 else 0 },\n})\n")),(0,o.kt)("h3",{id:"or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api"},"Or: pass a function that returns values, and imperatively update using the api"),(0,o.kt)("p",null,"You will get an API table back. It will not automatically animate on mount and re-render, but you can call ",(0,o.kt)("inlineCode",{parentName:"p"},"api.start")," to start the animation. Handling updates like this is generally preferred as it's more powerful. Further documentation can be found in ",(0,o.kt)("a",{parentName:"p",href:"/docs/common/imperatives"},"Imperatives"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local styles, api = RoactSpring.useSpring(hooks, function()\n    return { transparency = 0 }\n})\n\n-- Update spring with new props\napi.start({ transparency = if toggle 1 else 0 })\n-- Stop animation\napi.stop()\n")),(0,o.kt)("h3",{id:"finally-apply-styles-to-components"},"Finally: apply styles to components"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'return Roact.createElement("Frame", {\n    Transparency = styles.transparency,\n    Size = UDim2.fromScale(0.3, 0.3),\n})\n')),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("p",null,"All properties documented in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/common/props"},"common props")," apply."),(0,o.kt)("h2",{id:"additional-notes"},"Additional notes"),(0,o.kt)("h3",{id:"to-prop-shortcut"},"To-prop shortcut"),(0,o.kt)("p",null,'Any property that useSpring does not recognize will be combined into "to", for instance ',(0,o.kt)("inlineCode",{parentName:"p"},"transparency = 1")," will become ",(0,o.kt)("inlineCode",{parentName:"p"},"to = { transparency = 1 }"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- This...\nlocal styles = RoactSpring.useSpring({ transparency = 1 })\n-- is a shortcut for this...\nlocal styles = RoactSpring.useSpring({ to = { transparency = 1 } })\n")),(0,o.kt)("h2",{id:"demos"},"Demos"),(0,o.kt)("h3",{id:"draggable-element"},"Draggable element"),(0,o.kt)("a",{href:"https://github.com/chriscerie/roact-spring/blob/main/stories/hooks/useSpringDrag.story.lua"},(0,o.kt)("img",{src:"https://media.giphy.com/media/R2bJ57MNTdP7vmP6Ez/giphy.gif",width:"400"})))}d.isMDXComponent=!0}}]);